(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{563:function(t,e,r){"use strict";r.r(e);var a=r(13),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[t._v("#")]),t._v(" 容器")]),t._v(" "),r("p",[t._v("​\t虚拟化（Virtualization）和容器（Container）都是系统虚拟化的实现技术，可实现系统资源的“一虚多”共享。 容器技术是一种“轻量”的虚拟化方式，此处的“轻量”主要是相比于虚拟化技术而言的。例如，虚拟化通常在 Hypervisor层实现对硬件资源的虚拟化，Hypervisor为虚拟机提供了虚拟的运行平台，管理虚拟机的操作系统运行， 每个虚拟机都有自己的操作系统、系统库以及应用。而容器并没有 Hypervisor 层，每个容器是和主机 共享硬件 资源及操作系统  。 容器技术在操作系统层面实现了对计算机系统资源的虚拟化，在操作系统中，通过对 CPU、内存和文件系统 等资源的隔离、划分和控制，实现进程之间透明的资源使用。")]),t._v(" "),r("p",[r("img",{attrs:{src:"/images/blogs/CyberSecurity/NewTechnology/%E5%AE%B9%E5%99%A8.assets/image-20210603174050102.png",alt:"image-20210603174050102"}})]),t._v(" "),r("h1",{attrs:{id:"应用容器技术的优点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用容器技术的优点"}},[t._v("#")]),t._v(" "),r("strong",[t._v("应用容器技术的优点")])]),t._v(" "),r("p",[t._v("既然容器技术是新型虚拟化技术，那么，花费如此大成本来应用容器技术究竟会给我们带来什么样的好处呢？主要有以下四点：")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("轻量化")]),t._v("：容器技术的速度比传统虚拟化技术更快。轻量化的特性使得部署单个应用所需分配的空间和性能开销更小")]),t._v(" "),r("li",[r("strong",[t._v("高效率")]),t._v("：容器通过消除跨服务依赖性和冲突，提高了开发效率。每个容器都相当于一个不同的微服务，因此可以独立升级，而不需要考虑它们的同步。")]),t._v(" "),r("li",[r("strong",[t._v("便于移植")]),t._v("：容器将运行应用程序所必需的相关细节都封装在了一起，这大大简化了容器镜像在不同环境间移植的操作。可以使用相同的镜像在不同的基础环境中运行。")]),t._v(" "),r("li",[r("strong",[t._v("标准化")]),t._v("：大多数容器都基于开放标准，可以运行在所有主要的Linux发行版，微软等环境中。无需单独适配优化。")])]),t._v(" "),r("h2",{attrs:{id:"容器安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#容器安全"}},[t._v("#")]),t._v(" 容器安全")]),t._v(" "),r("p",[t._v("​\t\t很大的软肋--隔离性。基于内核提供的namespace功能，其实很多东西还是无法隔离的，一个简单的例子就是时间，一旦在某个容器内修改了系统时间，所有运行在这个宿主机上的容器内的时间都会改变，这显然不符合“沙盒”原则。再比如容器里面的jvm，如果不修改内核代码的话，看到的都是宿主机的cpu和内存情况。而更加严重的问题是，由于共享宿主机内核，一旦某个容器被植入恶意代码，攻击宿主机内核，会影响到该宿主机上的所有容器。")]),t._v(" "),r("p",[t._v("3.安全风脸和挑战\n3.1脆弱性和安全风险分析\n3.1.1软件风险\n3.1.2 API接口安全\n3.1.3不安全的镜像\n3.1.4容器隔离失效\n3.2安全威助分析\n3.2.1容器逃逸攻击\n3.2.2容器网络攻击\n3.2.3拒绝服务攻击\n3.3容器应用安全威助\n3.3.1微服务安全\n3.3.2 DevOps安全")]),t._v(" "),r("p",[t._v("1、镜像风险")]),t._v(" "),r("p",[t._v("镜像漏洞镜像，配置缺陷，嵌入式恶意软件嵌入式文明钥，使用不可信镜像")]),t._v(" "),r("p",[t._v("2、镜像仓库风险")]),t._v(" "),r("p",[t._v("与镜像仓库的连接不安全、镜像仓库中的镜像过时、认证和授权限制不足、")]),t._v(" "),r("p",[t._v("3、编排工具风险")]),t._v(" "),r("p",[t._v("管理访问限制不受限制，未经授权的访问、容器间网络流量隔离效果差，混合不同敏感度级别的工作负载、编排工作节点受信问题")]),t._v(" "),r("p",[t._v("4、容器风险")]),t._v(" "),r("p",[t._v("运行时软件中的漏洞、容器的网络访问不受限制、容器运行时配置不安全、应用漏洞、流氓容器")]),t._v(" "),r("p",[t._v("5、主机操作系统风险")]),t._v(" "),r("p",[t._v("攻击面大、共享内核、主机操作系统组件漏洞、用户访问权限不当、篡改主机操作系统文件系统")]),t._v(" "),r("h2",{attrs:{id:"容器安全防护"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#容器安全防护"}},[t._v("#")]),t._v(" 容器安全防护")]),t._v(" "),r("p",[r("img",{attrs:{src:"/images/blogs/CyberSecurity/NewTechnology/%E5%AE%B9%E5%99%A8.assets/20201126150307.png",alt:"容器安全概述"}})]),t._v(" "),r("h1",{attrs:{id:"att-ck-navigator-v9-容器矩阵"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#att-ck-navigator-v9-容器矩阵"}},[t._v("#")]),t._v(" ATT&CK-Navigator_v9-容器矩阵")]),t._v(" "),r("p",[r("img",{attrs:{src:"/images/blogs/CyberSecurity/NewTechnology/%E5%AE%B9%E5%99%A8.assets/image-20210603170418812.png",alt:"image-20210603170418812"}})]),t._v(" "),r("h2",{attrs:{id:"aliyun-docker-and-k8s-att-ck-matrix"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aliyun-docker-and-k8s-att-ck-matrix"}},[t._v("#")]),t._v(" Aliyun Docker and K8s ATT&CK Matrix")]),t._v(" "),r("p",[r("img",{attrs:{src:"/images/blogs/CyberSecurity/NewTechnology//%E5%AE%B9%E5%99%A8.assets/29b39a20c81b7ee71d2ee7a2c731f8b4.png",alt:"Aliyun Docker and K8s ATTCK Matrix"}})]),t._v(" "),r("h2",{attrs:{id:"azure-k8s-att-ck-matrix"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#azure-k8s-att-ck-matrix"}},[t._v("#")]),t._v(" Azure K8s ATT&CK Matrix")]),t._v(" "),r("p",[r("img",{attrs:{src:"/images/blogs/CyberSecurity/NewTechnology//%E5%AE%B9%E5%99%A8.assets/f018b3ab655eea648afe729f0b13a507-1622713624780.png",alt:"微软云 K8s Attck Matrix"}})]),t._v(" "),r("p",[r("strong",[t._v("Cloud Workload Protection Platforms")])]),t._v(" "),r("p",[t._v("云工作负载保护平台")]),t._v(" "),r("p",[t._v("Modern data centers support workloads that run in physical machines, virtual machines (VMs), containers, private cloud infrastructure and almost always include some workloads running in one or more "),r("a",{attrs:{href:"http://www.gartner.com/smarterwithgartner/cloud-shift-impacts-all-it-markets/",target:"_blank",rel:"noopener noreferrer"}},[t._v("public cloud"),r("OutboundLink")],1),t._v(" infrastructure as a service (IaaS) providers. Hybrid cloud workload protection platforms (CWPP) provide information security leaders with an integrated way to protect these workloads using a single management console and a single way to express security policy, regardless of where the workload runs.")]),t._v(" "),r("p",[t._v("现代数据中心支持在物理机器、虚拟机(vm)、容器、私有云基础设施中运行的工作负载，并且几乎总是包括在一个或多个作为服务(IaaS)提供者的公共云基础设施中运行的一些工作负载。混合云工作负载保护平台(CWPP)为信息安全领导者提供了一种集成的方式，使用单一的管理控制台和单一的方式表达安全策略来保护这些工作负载，而不管工作负载在哪里运行。")]),t._v(" "),r("p",[r("strong",[t._v("Container Security")])]),t._v(" "),r("p",[t._v("容器安全")]),t._v(" "),r("p",[t._v("Containers use a shared operating system (OS) model. An attack on a vulnerability in the host OS could lead to a compromise of all containers. Containers are not inherently unsecure, but they are being deployed in an unsecure manner by developers, with little or no involvement from security teams and little guidance from security architects. Traditional network and host-based security solutions are blind to containers. Container security solutions protect the entire life cycle of containers from creation into production and most of the container security solutions provide preproduction scanning combined with runtime monitoring and protection.")]),t._v(" "),r("p",[t._v("容器使用共享操作系统(OS)模型。对主机操作系统中的漏洞的攻击可能会导致所有容器的泄露。容器本身并不是不安全的，但是开发人员以不安全的方式部署它们，安全团队很少或根本没有参与，安全架构师也很少提供指导。传统的基于网络和主机的安全解决方案对容器视而不见。容器安全解决方案保护容器从创建到生产的整个生命周期，大多数容器安全解决方案提供生产前扫描，并结合运行时监控和保护。")]),t._v(" "),r("h2",{attrs:{id:"参考连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考连接"}},[t._v("#")]),t._v(" 参考连接")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/i042416/article/details/85012912",target:"_blank",rel:"noopener noreferrer"}},[t._v("通俗讲解：什么是容器？为什么我们要使用它？"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.zhihu.com/question/415556351",target:"_blank",rel:"noopener noreferrer"}},[t._v("容器安全隐患有哪些？ - 知乎 (zhihu.com)"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/517e757d6d17",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解容器基础概念 - 简书 (jianshu.com)"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"http://blog.nsfocus.net/2019%E5%B9%B4%E5%BA%A6%E5%AE%B9%E5%99%A8%E5%AE%89%E5%85%A8%E7%8E%B0%E7%8A%B6%E5%88%86%E6%9E%90/?from=timeline",target:"_blank",rel:"noopener noreferrer"}},[t._v("2019年度容器安全现状分析 – 绿盟科技技术博客 (nsfocus.net)"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/bloodzero_new/article/details/110328113",target:"_blank",rel:"noopener noreferrer"}},[t._v("玩转容器安全二 - 容器安全概述_zero-CSDN博客_容器安全"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.gartner.com/en/newsroom/press-releases/2017-06-14-gartner-identifies-the-top-technologies-for-security-in-2017",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gartner Identifies the Top Technologies for Security in 2017"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.secpulse.com/archives/160136.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ATT&CK框架新增ATT&CK容器矩阵 - SecPulse.COM | 安全脉搏"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=n.exports}}]);